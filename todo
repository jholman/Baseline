Tasks:
[ ] finish the stdlib
[ ] start work on the extlib
    [ ] sprintf (one bit at a time)
    [ ] looping constructs (may use stdlib 35?)
[ ] catch up the unit testing
    [ ] unit-test entire stdlib via blackbox functional tests
        [ ] stack manip
            [ ] is move-to-bottom-n working?  tried to use it, it seemed fucked.  must test!
        [ ] pipes
        [ ] comparisons
[ ] write some better samples
    [ ] 1-40 fizzbuzz ?
    [ ] sieve of eratosthenes ?
[ ] documentation
[ ] improve README
[ ] packaging?
[ ] additional data types
    [ ] floating-point literals
    [ ] maybe non-decimal literals?     ⁰ˣ⁴ᵇᶜ³ ₀ₓ₁ₐ₂    subscript is missing {bcdf} though...
    [ ] maybe scientific-notation literals?         
    [ ] convert I/O to UTF-8 (incl stop using chr())
[ ] upgrade the function nametable to allow mixing of baseline/python implementations
[ ] coding utilities
    [ ] string converter
    [ ] vim plugin for program entry


Note:
* my function nametable doesn't allow mixed baseline/python implementations, which was a goal
* current CI command-line (after `shopt -s globstar`):
    pywatch 'echo "\n\n\n\n\n\n\n\n\n\n\n";date ; py.test -v' **/*.py bin/*


Stdlib Catalog:

stack commands
     1      pop
     2      clone
     3      move-to-bottom
     5      split
[✓]  6      split-reverse
     7      merge
[ ]  8      merge-reverse ?
[ ]  9      swap-with-rstack
    
extra stack commands
    11      pop-n
    12      clone-n
    13      move-to-bottom-n
    19      dump entire state to stdout for debugging
    
pipes
    21      produce
[ ] 22      consume
[ ] 23      open file
[ ] 24      open unix socket
[ ] 25      open TCP socket
[ ] 27      send UDP datagram
    
flowcontrol
    30      call (unconditional)
    31      if-then
    32      if-then-else
[ ] 33      return
[ ] 34      goto
[ ] 35      recurse call (to self)
[ ] 39      sys.exit                    takes one int if avail, defaults gracefully to 0

arithmetic
    50      +
    51      -
    52      *
    53      /       (floordiv)
    54      %
    55      ^
    56      log
    57      //      (truediv)

binary arithmetic
    60      !
    61      &&
    62      ||
    63      wordwise xor

bitwise arithmetic
[ ] 70      bitwise not         for WHAT STANDARD WIDTH?!?  argh, leave out?
    71      &
    72      |
    73      bitwise xor
    74      <<
    75      >>

comparisons
    81      <
    82      <=
    83      ==
    84      >=
    85      >
[ ] 86      !=


